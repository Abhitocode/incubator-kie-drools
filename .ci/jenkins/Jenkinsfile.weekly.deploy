import org.jenkinsci.plugins.workflow.libs.Library
@Library('jenkins-pipeline-shared-libraries')_

import org.kie.jenkins.MavenCommand
import org.kie.jenkins.MavenStagingHelper

deployProperties = [:]

pipeline {
    agent {
        docker { 
            image env.AGENT_DOCKER_BUILDER_IMAGE
            args env.AGENT_DOCKER_BUILDER_ARGS
        }
    }

    options {
        timestamps()
        timeout(time: 180, unit: 'MINUTES')
    }

    environment {
        DROOLS_CI_EMAIL_TO = credentials("${JENKINS_EMAIL_CREDS_ID}")

        MAVEN_DEPLOY_LOCAL_DIR = "/tmp/maven_deploy_dir"
    }

    stages {
        stage('Initialize') {
            steps {
                script {
                    cleanWs(disableDeferredWipeout: true)

                    if (params.DISPLAY_NAME) {
                        currentBuild.displayName = params.DISPLAY_NAME
                    }

                    dir(getRepoName()) {
                        checkoutRepo()
                    }
                }
            }
            post {
                success {
                    script {
                        setDeployPropertyIfNeeded('git.branch', getBuildBranch())
                        setDeployPropertyIfNeeded('git.author', getGitAuthor())
                        setDeployPropertyIfNeeded('project.version', getProjectVersion())
                        setDeployPropertyIfNeeded('release', isRelease())
                    }
                }
            }
        }

        stage('Update project version') {
            when {
                expression { return getProjectVersion() }
            }
            steps {
                script {
                    configFileProvider([configFile(fileId: env.MAVEN_SETTINGS_CONFIG_FILE_ID, variable: 'MAVEN_SETTINGS_FILE')]){
                        maven.mvnVersionsSet(
                            getMavenCommand().withSettingsXmlFile(MAVEN_SETTINGS_FILE),
                            getProjectVersion(),
                            true
                        )
                    }
                }
            }
        }

        stage('Build & Test') {
            steps {
                script {
                    configFileProvider([configFile(fileId: env.MAVEN_SETTINGS_CONFIG_FILE_ID, variable: 'MAVEN_SETTINGS_FILE')]){
                        getMavenCommand()
                            .withOptions(env.DROOLS_BUILD_MVN_OPTS ? [ env.DROOLS_BUILD_MVN_OPTS ] : [])
                            .withOptions(env.BUILD_MVN_OPTS_CURRENT ? [ env.BUILD_MVN_OPTS_CURRENT ] : [])
                            .withProperty('maven.test.failure.ignore', true)
                            .skipTests(params.SKIP_TESTS)
                            .withSettingsXmlFile(MAVEN_SETTINGS_FILE)
                            .run('clean install')
                    }
                }
            }
            post {
                always {
                    script {
                        saveReports()
                        util.archiveConsoleLog()
                    }
                }
            }
        }

        stage('Deploy locally') {
            steps {
                script {
                    runMavenLocalDeploy()
                }
            }
        }
    }
    post {
        always {
            script {
                def propertiesStr = deployProperties.collect { entry ->  "${entry.key}=${entry.value}" }.join('\n')
                writeFile(text: propertiesStr, file: PROPERTIES_FILE_NAME)
                archiveArtifacts(artifacts: PROPERTIES_FILE_NAME)
            }
        }
        unsuccessful {
            sendNotification()
        }
        cleanup {
            script {
                util.cleanNode()
            }
        }
    }
}

void saveReports() {
    junit testResults: '**/target/surefire-reports/**/*.xml, **/target/failsafe-reports/**/*.xml, **/target/invoker-reports/**/TEST-*.xml', allowEmptyResults: true
}

void checkoutRepo() {
    deleteDir()
    checkout(githubscm.resolveRepository(getRepoName(), getGitAuthor(), getBuildBranch(), false, getGitAuthorCredsId()))
    // need to manually checkout branch since on a detached branch after checkout command
    sh "git checkout ${getBuildBranch()}"
}

void sendNotification() {
    if (params.SEND_NOTIFICATION) {
        mailer.sendMarkdownTestSummaryNotification('Weekly Deploy', "[${getBuildBranch()}] Drools", [env.DROOLS_CI_EMAIL_TO])
    } else {
        echo 'No notification sent per configuration'
    }
}

boolean shouldDeployToRepository() {
    return env.MAVEN_DEPLOY_REPOSITORY || getGitAuthor() == 'apache'
}

String getRepoName() {
    return env.REPO_NAME
}

String getGitAuthor() {
    // GIT_AUTHOR can be env or param
    return "${GIT_AUTHOR}"
}

String getBuildBranch() {
    return params.BUILD_BRANCH_NAME
}

String getProjectVersion() {
    return params.PROJECT_VERSION
}

String getPRBranch() {
    return params.DROOLS_PR_BRANCH
}

String getGitAuthorCredsId() {
    return env.GIT_AUTHOR_CREDS_ID
}

String getGitAuthorPushCredsId() {
    return env.GIT_AUTHOR_PUSH_CREDS_ID
}

void setDeployPropertyIfNeeded(String key, def value) {
    if (value) {
        deployProperties[key] = value
    }
}

MavenCommand getMavenCommand(String directory = '') {
    directory = directory ?: getRepoName()
    def mvnCmd = new MavenCommand(this, ['-fae', '-ntp'])
                .withOptions(env.BUILD_MVN_OPTS ? [ env.BUILD_MVN_OPTS ] : [])
                .inDirectory(directory)
    if (!isMainStream()) { // Workaround as enforcer rules may not be fixed on other streams
        mvnCmd.withProperty('enforcer.skip')
    } else {
        mvnCmd.withProperty('full')
    }
    return mvnCmd
}

void runMavenLocalDeploy() {
    mvnCmd = getMavenCommand()
    mvnCmd.withLocalDeployFolder(getLocalDeploymentFolder())

    configFileProvider([configFile(fileId: env.MAVEN_SETTINGS_CONFIG_FILE_ID, variable: 'MAVEN_SETTINGS_FILE')]){
        mvnCmd.skipTests(true)
            .withOptions(env.DROOLS_BUILD_MVN_OPTS ? [ env.DROOLS_BUILD_MVN_OPTS ] : [])
            .withOptions(env.BUILD_MVN_OPTS_CURRENT ? [ env.BUILD_MVN_OPTS_CURRENT ] : [])
            .withSettingsXmlFile(MAVEN_SETTINGS_FILE)
            .run('clean deploy')
    }
}

String getLocalDeploymentFolder() {
    return "${env.MAVEN_DEPLOY_LOCAL_DIR}/${getRepoName()}"
}

boolean isMainStream() {
    return env.DROOLS_STREAM == 'main'
}
